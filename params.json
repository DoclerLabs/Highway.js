{"name":"Highway.js","tagline":"A flexible pub/sub event emitter for web-worker cross-communication with fallback support.","body":"# Highway.js\r\nA flexible pub/sub event emitter for web-worker cross-communication with fallback support.\r\n\r\n![\"Highway PubSub Cross-Communication\"](https://github.com/DoclerLabs/Highway.js/raw/master/www/cross.png)\r\n\r\n##Usage\r\nInclude **Highway.js** on both client side and worker side.\r\n\r\nClient:\r\n```html\r\n<script src=\"Highway.js\"></script>\r\n```\r\n\r\nWorker:\r\n```javascript\r\nimportScripts('Highway.js')\r\n```\r\n\r\nInitialize:\r\n```javascript\r\n// Client side\r\nvar Host = self.Worker ? new self.Worker('worker.bundle.js') : self\r\nself.HW = self.HW || new self.Highway(Host)\r\n// Worker side\r\nself.HW = self.HW || new self.Highway()\r\n```\r\n\r\nNote that you cannot use `importScripts` in case you want proper fallback if there is no web-worker support.\r\nIn that you need to include a bundle in `new Worker('worker.bundle.js')` and the bundle should also include Highway.\r\nThis way you can include your worker bundle on the client side after no worker support is detected.\r\n\r\n##API\r\n\r\n###sub\r\n\r\nSubscribe to an event.\r\n\r\n```javascript\r\nself.HW.sub('MyOwnEvent', function(){\r\n    // Do something when event occurs\r\n    // See pub, this will run 3 times\r\n})\r\nself.HW.sub('MyOwnEvent->DidSomething', function(){\r\n    // Do something when event occurs\r\n    // See pub, this will run once\r\n})\r\n```\r\n\r\n###pub\r\n\r\nPublish an event.\r\n\r\n```javascript\r\nself.HW.pub('MyOwnEvent', customData)\r\nself.HW.pub('MyOwnEvent->DidSomething', customData)\r\nself.HW.pub('MyOwnEvent->IHaveState', customData, 'passed')\r\n```\r\n\r\n###one\r\n\r\nSubscribe to an event, unsubscribe once it is called.\r\n\r\n```javascript\r\nself.HW.one('MyOwnEventOnce', function(){\r\n    // I'll just run once and automatically unsubscribe then\r\n})\r\n```\r\n\r\n###off\r\n\r\nUnsubscribe from an event.\r\n\r\n```javascript\r\n// Unsubscribe from ALL events associated with MyOwnEvent\r\nself.HW.off('MyOwnEvent')\r\n// Unsubscribe only a specific function\r\nself.HW.off('MyOwnEvent', handlerFunction)\r\n// Unsubscribe from ALL events associated with MyOwnEvent and event the deep ones. eg: MyOwnEvent->DeepEvent too\r\nself.HW.off('MyOwnEvent', true)\r\n```\r\n\r\n###destroy\r\n\r\nDestroy the Highway instance.\r\n\r\n```javascript\r\nself.HW.destroy()\r\n```\r\n\r\n#Credits\r\n[Victor Vincent](http://wintercounter.me)\r\n[DoclerLabs](http://doclerlabs.com)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}